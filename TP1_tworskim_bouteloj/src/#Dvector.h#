#ifndef DVECTOR
#define DVECTOR

/*!
 * \file Dvector.H
 * \brief Classe Dvector 
 * \author Marcelin Tworski
 * \version 0.1
 */


 /*! \class Dvector
   * \brief classe representant un vectuer par un entier dim et un tableau comp
   *
   *  La classe gere la lecture d'une liste de morceaux
   */

class Dvector
{
 private :
  double *comp;
 public :
  int dim;
  
    /*!
     *  \brief Constructeur
     *
     *  Constructeur par défaut de la classe Dvector
     */
  Dvector();
  /*!
     *  \brief Constructeur avec un paramêtre de taille, initialisé à 0 .. 0 
     *
     *  Constructeur de la classe Dvector
     *
     *  \param d : dimension du vecteur
     */
  Dvector(int d);
  /*!
     *  \brief Constructeur avec un paramêtre de taille, initialisé à la meme valeur pour toutes les composantes
     *
     *  Constructeur de la classe Dvector
     *
     *  \param d : dimension du vecteur db : valeur d'initialisation
     */
  Dvector(int d, double db);

  /*!
     *  \brief Constructeur par recopie
     *
     *  Constructeur de la classe Dvector
     *
     *  \param dv : Vecteur à recopier
     */
  Dvector(const Dvector & dv);

  /*!
     *  \brief Constructeur par lecture de flux
     *
     *  Constructeur de la classe Dvector
     *
     *  \param str : flux à lire
     */
  Dvector(std::string str);
  /*!
     *  \brief Destructeur
     *
     *  Destructeur de la classe Dvector
     */
  ~Dvector();

  /*!
     *  \brief Affichage
     *
     *  Affichage d'un vecteur
     *
     *  \param str : flux de sortie
     */
  void display(std::ostream& str);
  /*!
     *  \brief Remplit aléatoirement
     *
     *  Rempli aléatoirement un vecteur avec des double entre 0 et 1
     */
  void fillRandomly();
  /*!
     *  \brief Taille
     *
     *  Donne la taille d'un vecteur
     */
  int size();
  /*!
     *  \brief opérateur ()
     *
     *  Donne la i-ème composante du vecteur
     *
     *\param i : composante désirée
     */
  double &operator () (int i) ;
  double operator () (int i) const;
 /*!
     *  \brief Addition
     *
     *  Addition vecteur v et double d :  v += d
     *
     *\param d : double à ajouter
     */
  Dvector & operator+= (double d);
  /*!
     *  \brief Soustraction
     *
     *  Soustraction vecteur v et double d :  v += d
     *
     *\param d : double à soustraire
     */
  Dvector & operator-= (double d);
    /*!
     *  \brief Soustraction
     *
     *  Soustraction vecteur v et double d :  v += d
     *
     *\param d : double à soustraire
     */
  Dvector & operator*= (double d);
  Dvector & operator/= (double d);

  Dvector & operator= (Dvector dvect);
  Dvector & operator+= (Dvector dvect);
  Dvector & operator-= (Dvector dvect);

  Dvector operator - ();
  Dvector operator - (Dvector V);
  Dvector operator + (Dvector V);
  double operator * (Dvector V);

  bool operator == (const Dvector &V);



};

Dvector operator+ (const double d, const Dvector dvect);
Dvector operator+ (const Dvector dvect, const double d);
Dvector operator- (const double d, const Dvector dvect);
Dvector operator- (const Dvector dvect, const double d);
Dvector operator* (const double d, const Dvector dvect);
Dvector operator* (const Dvector dvect, const double d);
Dvector operator/ (const Dvector dvect,const double d);

double operator* (const Dvector dvect, const Dvector dvect2);


std::ostream& operator << (std::ostream & Out,const Dvector & V);
std::istream& operator >> (std::istream & In,const Dvector & V);
#endif
